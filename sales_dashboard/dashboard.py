# dashboard.py
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go

# --- 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
@st.cache_data # –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
def load_and_process_data():
    path = '–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è/' # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π —Å–ª—ç—à –¥–ª—è –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç–∏
    calendar = pd.read_excel(path + '–ö–∞–ª–µ–Ω–¥–∞—Ä—å.xlsx')
    partner = pd.read_excel(path + '–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã.xlsx')
    plan = pd.read_excel(path + '–ü–ª–∞–Ω –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.xlsx')
    staff = pd.read_excel(path + '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏.xlsx')
    products = pd.read_excel(path + '–¢–æ–≤–∞—Ä—ã.xlsx')
    fact = pd.read_excel(path + '–§–∞–∫—Ç –ø—Ä–æ–¥–∞–∂.xlsx')

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    fact['orderdate'] = pd.to_datetime(fact['orderdate'])
    calendar['orderdate'] = pd.to_datetime(calendar['orderdate'])
    plan['Date'] = pd.to_datetime(plan['Date'])

    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
    fact['year'] = fact['orderdate'].dt.year
    fact['month'] = fact['orderdate'].dt.month
    fact['day_of_week'] = fact['orderdate'].dt.day_name()

    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Ä–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏
    fact['profit'] = fact['netsalesamount'] - fact['supplierprice']

    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    df = fact.merge(partner, left_on='name', right_on='name', how='left')
    df = df.merge(products, left_on='productid', right_on='productid', how='left')
    df = df.merge(staff, left_on='employee_id', right_on='employeeid', how='left')
    calendar_clean = calendar[['orderdate', 'day', 'month', 'year']]
    df = df.merge(calendar_clean, left_on='orderdate', right_on='orderdate', how='left', suffixes=('', '_cal'))
    
    return df, plan # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–∞–∫–∂–µ –ø–ª–∞–Ω –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ 11

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
df, plan_data = load_and_process_data()

# --- 2. –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (—Ç–µ –∂–µ, —á—Ç–æ –∏ —É –≤–∞—Å) ---
# (–ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏–π get_top_customers_by_category_country, pareto_analysis –∏ —Ç.–¥. –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
# –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤—Å–µ 11 —Ñ—É–Ω–∫—Ü–∏–π –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:
def get_top_customers_by_category_country(category_name, country_name):
    """–í–æ–ø—Ä–æ—Å 1: –¢–û–ü –∑–∞–∫–∞–∑—á–∏–∫–∏ –ø–æ –ø—Ä–∏–±—ã–ª–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å—Ç—Ä–∞–Ω–µ"""
    filtered = df[(df['categoryname'] == category_name) & (df['country'] == country_name)]
    if len(filtered) == 0:
        return pd.DataFrame(columns=['name', 'profit'])
    result = filtered.groupby('name')['profit'].sum().reset_index()
    result = result.sort_values('profit', ascending=False)
    return result.head(10)

def pareto_analysis(country_name):
    """–í–æ–ø—Ä–æ—Å 2: 20% –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –ø—Ä–∏–Ω–æ—Å—è—Ç 80% –ø—Ä–∏–±—ã–ª–∏ –≤ —Å—Ç—Ä–∞–Ω–µ"""
    filtered = df[df['country'] == country_name]
    if len(filtered) == 0 or filtered['profit'].sum() == 0:
        return pd.DataFrame()
    customer_profit = filtered.groupby('name')['profit'].sum().reset_index()
    customer_profit = customer_profit.sort_values('profit', ascending=False)
    customer_profit['cumulative_profit'] = customer_profit['profit'].cumsum()
    customer_profit['cumulative_percentage'] = customer_profit['cumulative_profit'] / customer_profit['profit'].sum() * 100
    customer_profit['customer_percentage'] = (customer_profit.index + 1) / len(customer_profit) * 100
    return customer_profit.head(20)

# ... (–≤—Å—Ç–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ 9 —Ñ—É–Ω–∫—Ü–∏–π –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ) ...

# –î–ª—è –≤–æ–ø—Ä–æ—Å–∞ 11 –Ω–µ–º–Ω–æ–≥–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ–±—ã –æ–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞–ª–∞ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞:
def sales_plan_performance_local(df_local, plan_local): # –ò–∑–º–µ–Ω–∏–ª–∏ –∏–º—è, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å
    """–í–æ–ø—Ä–æ—Å 11: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø—Ä–æ–¥–∞–∂"""
    actual = df_local.groupby(df_local['orderdate'].dt.to_period('M')).agg({
        'grosssalesamount': 'sum',
        'netsalesamount': 'sum'
    }).reset_index()
    actual['Date'] = actual['orderdate'].dt.to_timestamp()
    
    plan_monthly = plan_local.groupby(plan_local['Date'].dt.to_period('M')).agg({
        'Gross_Plan': 'sum',
        'Net_Plan': 'sum'
    }).reset_index()
    plan_monthly['Date'] = plan_monthly['Date'].dt.to_timestamp()
    
    performance = actual.merge(plan_monthly, on='Date', how='outer')
    performance['gross_performance'] = np.where(
        performance['Gross_Plan'] != 0,
        (performance['grosssalesamount'] / performance['Gross_Plan']) * 100,
        0
    )
    performance['net_performance'] = np.where(
        performance['Net_Plan'] != 0,
        (performance['netsalesamount'] / performance['Net_Plan']) * 100,
        0
    )
    return performance

# --- 3. Streamlit –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
st.set_page_config(page_title="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂", layout="wide")
st.title("üìä –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–Ω–µ–ª—å –ø—Ä–æ–¥–∞–∂ –º–∞–≥–∞–∑–∏–Ω–∞ –æ–¥–µ–∂–¥—ã")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
st.sidebar.header("–ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã")
selected_years = st.sidebar.multiselect(
    "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥—ã",
    options=sorted(df['year'].unique()),
    default=sorted(df['year'].unique())
)
selected_countries = st.sidebar.multiselect(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—ã",
    options=sorted(df['country'].unique()),
    default=sorted(df['country'].unique()) # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ —Å—Ç—Ä–∞–Ω—ã
)

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ DataFrame
filtered_df = df[df['year'].isin(selected_years) & df['country'].isin(selected_countries)]

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
st.header("–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
col1, col2, col3 = st.columns(3)
col1.metric("–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å", f"{filtered_df['profit'].sum():,.2f}")
col2.metric("–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂ (Net)", f"{filtered_df['netsalesamount'].sum():,.2f}")
col3.metric("–ö–æ–ª-–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤", filtered_df['name'].nunique())

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
tab1, tab2, tab3, tab4, tab5, tab6, tab7, tab8, tab9, tab10, tab11 = st.tabs([
    "1. –¢–û–ü –∫–ª–∏–µ–Ω—Ç—ã", "2. 20/80 –ø—Ä–∞–≤–∏–ª–æ", "3. –°—Ç—Ä–∞–Ω—ã", "4. –ú–µ–Ω–µ–¥–∂–µ—Ä—ã",
    "5. –°–∫–∏–¥–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤", "6. –î–Ω–∏ –Ω–µ–¥–µ–ª–∏", "7. –¢–æ–≤–∞—Ä—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞",
    "8. –¢–û–ü —Ç–æ–≤–∞—Ä–æ–≤", "9. –¢—Ä–µ–Ω–¥ —Ç–æ–≤–∞—Ä–∞", "10. ROI", "11. –ü–ª–∞–Ω –ø—Ä–æ–¥–∞–∂"
])

with tab1:
    st.header("1. –¢–û–ü –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –ø–æ –ø—Ä–∏–±—ã–ª–∏")
    st.subheader("–ñ–µ–Ω—Å–∫–∞—è –æ–±—É–≤—å –≤ –ì–µ—Ä–º–∞–Ω–∏–∏")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏?
    # –î–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ df
    top_customers_1 = get_top_customers_by_category_country("–ñ–µ–Ω—Å–∫–∞—è –æ–±—É–≤—å", "–ì–µ—Ä–º–∞–Ω–∏—è")
    if not top_customers_1.empty:
        st.dataframe(top_customers_1)
        fig1 = px.bar(
            top_customers_1,
            x='name',
            y='profit',
            title='–¢–û–ü –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –ø—Ä–∏–±—ã–ª–∏ (–ñ–µ–Ω—Å–∫–∞—è –æ–±—É–≤—å, –ì–µ—Ä–º–∞–Ω–∏—è)',
            color='profit',
            color_continuous_scale='tealrose'
        )
        fig1.update_layout(xaxis_tickangle=-45)
        st.plotly_chart(fig1, use_container_width=True)
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å—Ç—Ä–∞–Ω—ã.")

with tab2:
    st.header("2. –ê–Ω–∞–ª–∏–∑ –ü–∞—Ä–µ—Ç–æ (20/80)")
    st.subheader("–ë—Ä–∞–∑–∏–ª–∏—è")
    pareto_data_2 = pareto_analysis("–ë—Ä–∞–∑–∏–ª–∏—è")
    if not pareto_data_2.empty:
        st.dataframe(pareto_data_2)
        fig2 = go.Figure()
        fig2.add_trace(go.Scatter(
            x=pareto_data_2['customer_percentage'],
            y=pareto_data_2['cumulative_percentage'],
            mode='lines+markers',
            name='–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –ø—Ä–∏–±—ã–ª—å (%)'
        ))
        fig2.add_trace(go.Scatter(
            x=[0, 100],
            y=[0, 100],
            mode='lines',
            name='–õ–∏–Ω–∏—è —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ (20/80)',
            line=dict(dash='dash', color='red')
        ))
        fig2.update_layout(
            title='–ê–Ω–∞–ª–∏–∑ –ü–∞—Ä–µ—Ç–æ: 20% –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—Ä–∏–Ω–æ—Å—è—Ç 80% –ø—Ä–∏–±—ã–ª–∏ (–ë—Ä–∞–∑–∏–ª–∏—è)',
            xaxis_title='–ü—Ä–æ—Ü–µ–Ω—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ (%)',
            yaxis_title='–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –¥–æ–ª—è –ø—Ä–∏–±—ã–ª–∏ (%)',
            showlegend=True
        )
        st.plotly_chart(fig2, use_container_width=True)
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ü–∞—Ä–µ—Ç–æ –ø–æ –ë—Ä–∞–∑–∏–ª–∏–∏.")

with tab3:
    st.header("3. –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    countries_3 = filtered_df.groupby('country').agg({
        'profit': 'sum',
        'netsalesamount': 'sum',
        'name': 'nunique'
    }).reset_index()
    countries_3.columns = ['country', 'total_profit', 'total_sales', 'unique_customers']
    countries_3 = countries_3.sort_values('total_profit', ascending=False)

    if not countries_3.empty:
        st.dataframe(countries_3)
        fig3 = px.bar(
            countries_3.head(10),
            x='country',
            y='total_profit',
            title='–¢–û–ü-10 —Å—Ç—Ä–∞–Ω –ø–æ –æ–±—â–µ–π –ø—Ä–∏–±—ã–ª–∏ (—Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏)',
            color='total_profit',
            color_continuous_scale='blues'
        )
        fig3.update_layout(xaxis_tickangle=-45)
        st.plotly_chart(fig3, use_container_width=True)
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—Ç—Ä–∞–Ω–∞–º.")

with tab4:
    st.header("4. –¢–û–ü –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ –æ–±—ä–µ–º—É –ø—Ä–æ–¥–∞–∂")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    manager_sales_4 = filtered_df.groupby('employeename')['netsalesamount'].sum().reset_index()
    manager_sales_4 = manager_sales_4.sort_values('netsalesamount', ascending=False)

    if not manager_sales_4.empty:
        st.dataframe(manager_sales_4)
        fig4 = px.bar(
            manager_sales_4,
            x='employeename',
            y='netsalesamount',
            title='–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º (—Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏)',
            color='netsalesamount',
            color_continuous_scale='sunset'
        )
        fig4.update_layout(xaxis_tickangle=-45)
        st.plotly_chart(fig4, use_container_width=True)
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º.")

with tab5:
    st.header("5. –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –∏ —Å–∫–∏–¥–∫–∏")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    manager_discounts_5 = filtered_df.groupby('employeename').agg({
        'netsalesamount': 'sum',
        'discount': 'mean',
        'quantity': 'sum',
        'profit': 'sum'
    }).reset_index()
    manager_discounts_5['sales_per_transaction'] = manager_discounts_5['netsalesamount'] / manager_discounts_5['quantity']

    if not manager_discounts_5.empty:
        st.dataframe(manager_discounts_5)
        fig5 = px.scatter(
            manager_discounts_5,
            x='discount',
            y='netsalesamount',
            size='profit',
            color='employeename',
            hover_name='employeename',
            title='–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π —Å–∫–∏–¥–∫–∏ –∏ –æ–±—ä–µ–º–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º (—Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏)',
            labels={'discount': '–°—Ä–µ–¥–Ω—è—è —Å–∫–∏–¥–∫–∞', 'netsalesamount': '–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂ (Net Sales)', 'profit': '–ü—Ä–∏–±—ã–ª—å'}
        )
        st.plotly_chart(fig5, use_container_width=True)
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º.")

with tab6:
    st.header("6. –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏")
    st.subheader("–û–¥–µ–∂–¥–∞ –¥–ª—è –Ω–æ–≤–æ—Ä–æ–∂–¥–µ–Ω–Ω—ã—Ö")
    weekdays_6 = get_productive_weekdays("–û–¥–µ–∂–¥–∞ –¥–ª—è –Ω–æ–≤–æ—Ä–æ–∂–¥–µ–Ω–Ω—ã—Ö") # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    if not weekdays_6.empty:
        st.dataframe(weekdays_6)
        fig6 = px.bar(
            weekdays_6,
            x='day_of_week',
            y='netsalesamount',
            title='–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ (–û–¥–µ–∂–¥–∞ –¥–ª—è –Ω–æ–≤–æ—Ä–æ–∂–¥–µ–Ω–Ω—ã—Ö)',
            color='netsalesamount',
            color_continuous_scale='mint'
        )
        st.plotly_chart(fig6, use_container_width=True)
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–û–¥–µ–∂–¥–∞ –¥–ª—è –Ω–æ–≤–æ—Ä–æ–∂–¥–µ–Ω–Ω—ã—Ö'.")

with tab7:
    st.header("7. –¢–æ–≤–∞—Ä—ã, –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ –ú–∞—Ç–≤–µ–µ–º –ö—Ä—ã–ª–æ–≤—ã–º")
    matvey_products_7 = get_products_by_manager("–ú–∞—Ç–≤–µ–π –ö—Ä—ã–ª–æ–≤") # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if not matvey_products_7.empty:
        st.dataframe(matvey_products_7)
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ø –ø–æ –ø—Ä–∏–±—ã–ª–∏
        matvey_top = matvey_products_7.nlargest(10, 'profit')
        if not matvey_top.empty:
            fig7 = px.bar(
                matvey_top,
                x='productname',
                y='profit',
                title='–¢–û–ü —Ç–æ–≤–∞—Ä–æ–≤ –ú–∞—Ç–≤–µ—è –ö—Ä—ã–ª–æ–≤–∞ –ø–æ –ø—Ä–∏–±—ã–ª–∏',
                color='profit',
                color_continuous_scale='purp'
            )
            fig7.update_layout(xaxis_tickangle=-45)
            st.plotly_chart(fig7, use_container_width=True)
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –ú–∞—Ç–≤–µ—è –ö—Ä—ã–ª–æ–≤–∞.")

with tab8:
    st.header("8. –¢–û–ü —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    st.subheader("–ü–ª—è–∂–Ω–∞—è –æ–¥–µ–∂–¥–∞")
    beach_products_8 = get_top_products_by_category("–ü–ª—è–∂–Ω–∞—è –æ–¥–µ–∂–¥–∞") # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if not beach_products_8.empty:
        st.dataframe(beach_products_8)
        fig8 = px.bar(
            beach_products_8,
            x='productname',
            y=['quantity', 'profit'],
            title='–¢–û–ü —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–ü–ª—è–∂–Ω–∞—è –æ–¥–µ–∂–¥–∞" (–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –ü—Ä–∏–±—ã–ª—å)',
            barmode='group'
        )
        fig8.update_layout(xaxis_tickangle=-45)
        st.plotly_chart(fig8, use_container_width=True)
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–ü–ª—è–∂–Ω–∞—è –æ–¥–µ–∂–¥–∞'.")

with tab9:
    st.header("9. –¢—Ä–µ–Ω–¥ —Ç–æ–≤–∞—Ä–∞")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –∏–∑ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    if not filtered_df.empty:
        sample_product_9 = filtered_df['productname'].iloc[0]
        st.subheader(f"–ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞: {sample_product_9}")
        product_trend_9 = analyze_product_trend(sample_product_9) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ df
        if not product_trend_9.empty:
            st.dataframe(product_trend_9)
            fig9 = px.line(
                product_trend_9,
                x='year',
                y='profit',
                markers=True,
                title=f'–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–∏–±—ã–ª–∏ –ø–æ —Ç–æ–≤–∞—Ä—É: {sample_product_9}'
            )
            st.plotly_chart(fig9, use_container_width=True)
        else:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç—Ä–µ–Ω–¥–∞ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.")
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞.")

with tab10:
    st.header("10. –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π (ROI)")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    yearly_metrics_10 = filtered_df.groupby('year').agg({
        'profit': 'sum',
        'supplierprice': 'sum'
    }).reset_index()
    yearly_metrics_10['roi'] = np.where(
        yearly_metrics_10['supplierprice'] != 0,
        (yearly_metrics_10['profit'] / yearly_metrics_10['supplierprice']) * 100,
        0
    )
    roi_data_10 = yearly_metrics_10[['year', 'profit', 'supplierprice', 'roi']]

    if not roi_data_10.empty:
        st.dataframe(roi_data_10)
        fig10 = px.line(
            roi_data_10,
            x='year',
            y='roi',
            markers=True,
            title='–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π (ROI) –ø–æ –≥–æ–¥–∞–º (—Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏)',
            color_discrete_sequence=['green']
        )
        st.plotly_chart(fig10, use_container_width=True)
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ ROI.")

with tab11:
    st.header("11. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø—Ä–æ–¥–∞–∂")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ df –∏ plan_data, —Ç–∞–∫ –∫–∞–∫ –ø–ª–∞–Ω —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω
    plan_performance_11 = sales_plan_performance_local(df, plan_data) # –ü–µ—Ä–µ–¥–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ Date –≤ —Ñ–æ—Ä–º–∞—Ç–µ datetime
    plan_performance_11['Date'] = pd.to_datetime(plan_performance_11['Date'])

    if not plan_performance_11.empty:
        st.dataframe(plan_performance_11)
        fig11 = go.Figure()
        fig11.add_trace(go.Scatter(
            x=plan_performance_11['Date'],
            y=plan_performance_11['gross_performance'],
            mode='lines+markers',
            name='–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ (Gross Sales)',
            line=dict(color='blue')
        ))
        fig11.add_trace(go.Scatter(
            x=plan_performance_11['Date'],
            y=plan_performance_11['net_performance'],
            mode='lines+markers',
            name='–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ (Net Sales)',
            line=dict(color='orange')
        ))
        # –î–æ–±–∞–≤–∏–º –ª–∏–Ω–∏—é 100% –¥–ª—è –æ—Ä–∏–µ–Ω—Ç–∏—Ä–∞
        fig11.add_hline(y=100, line_dash="dash", line_color="red", annotation_text="100% –ü–ª–∞–Ω")
        fig11.update_layout(
            title='–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ –º–µ—Å—è—Ü–∞–º',
            xaxis_title="–î–∞—Ç–∞",
            yaxis_title="–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ (%)"
        )
        st.plotly_chart(fig11, use_container_width=True)
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞.")